"0",""
"0","# Makes all dates to use 1st day of the month only."
"0","car_data <- car_data |> mutate(date_reg = floor_date(date_reg, unit = ""month""))"
"0",""
"0","# --- Find the most recent two full months ---"
"0","# (Ensures the code always uses the latest data)"
"0","latest_date <- max(car_data$date_reg)"
"0",""
"0","year_current <- year(latest_date)"
"0","ytd_current_start <- ymd(paste0(year_current, ""-01,-01""))"
"0","ytd_current_end <- latest_date"
"0",""
"0","ytd_previous_start <- ytd_current_start %m-% years(1)"
"0","ytd_previous_end <- ytd_current_end %m-% years(1)"
"0",""
"0","month_current <- latest_date"
"0","month_previous <- month_current %m-% months(1)"
"0","month_previous_year <- month_current %m-% months(12)"
"0",""
"0","# --- Calculate counts for each month and YTD ---"
"0","month_current_count <- car_data |>"
"0","  filter(date_reg == month_current) |>"
"0","  count(maker, name = ""count_current"")"
"0",""
"0","month_previous_count <- car_data |>"
"0","  filter(date_reg == month_previous) |>"
"0","  count(maker, name = ""count_previous"")"
"0",""
"0","month_previous_year_count <- car_data |>"
"0","  filter(date_reg == month_previous_year) |>"
"0","  count(maker, name = ""count_previous_year"")"
"0",""
"0","ytd_current_count <- car_data |>"
"0","    filter(date_reg >= ytd_current_start & date_reg <= ytd_current_end) |>"
"0","    count(maker, name = ""count_ytd_current"")"
"0",""
"0","ytd_previous_count <- car_data |>"
"0","    filter(date_reg >= ytd_previous_start & date_reg <= ytd_previous_end) |>"
"0","    count(maker, name = ""count_ytd_previous"")"
"0",""
"0","# --- Join and calculate MoM growth ---"
"0","summary_data <- month_current_count |>"
"0","  full_join(month_previous_count, by = 'maker') |>"
"0","  full_join(month_previous_year_count, by = ""maker"") |>"
"0","  full_join(ytd_current_count, by = ""maker"") |>"
"0","  full_join(ytd_previous_count, by = ""maker"") |>"
"0","  mutate("
"0","    count_current = replace_na(count_current, 0),"
"0","    count_previous = replace_na(count_previous, 0),"
"0","    count_previous_year = replace_na(count_previous_year, 0),"
"0","    count_ytd_current = replace_na(count_ytd_current, 0),"
"0","    count_ytd_previous = replace_na(count_ytd_previous, 0)"
"0","  ) |>"
"0","  mutate("
"0","    growth_MoM = if_else(count_previous > 0, ((count_current/count_previous)-1), NA_real_),"
"0","    growth_YoY = if_else(count_previous_year > 0, ((count_current/count_previous_year)-1), NA_real_),"
"0","    growth_YTD = if_else(count_ytd_previous > 0, ((count_ytd_current/count_ytd_previous)-1), NA_real_),"
"0","    classification = case_when( maker %in% c(""Perodua"", ""Proton"") ~ ""National"", TRUE ~ ""Non-National"")"
"0","  ) |>"
"0","  arrange(desc(count_current)) |>"
"0","  mutate(rank = row_number()) |>"
"0","  select(rank, maker, classification, count_current, count_previous, growth_MoM, count_previous_year, growth_YoY,"
"0","         count_ytd_current, count_ytd_previous, growth_YTD)"
"0","  "
"0",""
"0","print(latest_date)"
"1","[1]"
"1"," ""2025-08-01"""
"1","
"
